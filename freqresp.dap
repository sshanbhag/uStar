// freqresp.dap
//
// Perform a frequency response experiment. The DAPL system coordinates
// the input and output processing, including the generation of test
// signals in real-time, while Matlab collects the data sets and
// performs the detailed input/output analysis.
//
// The stimulus signal generated by the DAP board is a sine wave with
// "frequency modulation" that ramps the frequency linearly from 0 to
// 1/4 of the Nyquist rate. (At the maximum rate, there are 8 samples
// per waveform cycle.) The frequency range is covered twice (up, down)
// per cycle of 20000 samples. This stimulus waveform provides roughly
// equal amounts of signal energy in each part of the spectrum, supporting
// a reasonably robust input/analysis.
// 
reset

// Configure the sampling rate to use. If the maximum frequency
// of interest is 1000 Hz, you would want the sampling at
// 8000 samples per second for each channel.

idefine  sampling
  channels 2
  set ipipe0  D0      // Loopback monitoring stimulus output signal
  set ipipe1  D1      // Response signal
  time  62.5          // 16000 total sampling operations per second
end

// Generate the stimulus waveform
pipe   ptriang  word
pipe   pmodul   word
pipe   poutsig  word
pipe   psend    word

// Modulate a sine wave (type '2' modulation) with a frequency rate
// modulation factor varied from approximately 0 to maximum configured.
// This provides the data for the output excitation signal.
pdefine  generate
  triangle(16383, 20000, ptriang)
  pmodul = ptriang + 16384
  sinewave(26214,8,poutsig,2,pmodul)
  copy(poutsig,Opipe0)
end

// Deliver the stimulus output waveform, approximately 4 volts peak and
// zero mean, to the output converters in a -5V to +5V hardware configuration.
// There is one output operation per two input sample operations.
odefine  stimulus  1
  set opipe0 A0
  time  125.0
end

// Deliver the "input / output" pairs of applied stimulus and
// observed response to the host, in blocks of 20000 points for
// each channel, until told to stop.
pdefine  transfer
  copy(ipipe(0,1),$BinOut)
end

// This configuration starts automatically when downloaded
start
